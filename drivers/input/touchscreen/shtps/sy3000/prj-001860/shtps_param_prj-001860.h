/* drivers/input/touchscreen/shtps/sy3000/prj-001860/shtps_param_prj-001860.h
 *
 * Copyright (c) 2017, Sharp. All rights reserved.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */
#ifndef __SHTPS_PARAM_PRJ_001860_H__
#define __SHTPS_PARAM_PRJ_001860_H__

/* ===================================================================================
 * [ Parameters ]
 */
/* -----------------------------------------------------------------------------------
 */
SHTPS_PARAM_DEF( SHTPS_PRM_STARTUP_MIN_TIME,	30 );
SHTPS_PARAM_DEF( SHTPS_SLEEP_IN_WAIT_MS, 	30  );
SHTPS_PARAM_DEF( SHTPS_SLEEP_OUT_WAIT_MS, 	0  );
SHTPS_PARAM_DEF( SHTPS_VEILVIEW_PATTERN, 	SHTPS_VEILVIEW_PATTERN_MONOCHROME_1H);

/* -----------------------------------------------------------------------------------
 */
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_READ_SPEED,		TPS_SPI_R_CLOCK);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_WRITE_SPEED,		TPS_SPI_W_CLOCK);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_FW_WRITE_SPEED,	TPS_SPI_FW_W_CLOCK);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_READ_WAIT,		TPS_SPI_R_BYTE_DELAY);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_WRITE_WAIT,		TPS_SPI_W_BYTE_DELAY);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_CLOCK_FW_WRITE_WAIT,	TPS_SPI_FW_W_BYTE_DELAY);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_TANSACTION_READ_WAIT,	TPS_SPI_R_TANS_WAIT);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_TANSACTION_WRITE_WAIT,	TPS_SPI_W_TANS_WAIT);
SHTPS_PARAM_DEF(SHTPS_SY3X00_SPI_TANSACTION_FW_WRITE_WAIT,	TPS_SPI_FW_W_TANS_WAIT);
SHTPS_PARAM_DEF(SHTPS_TOUCH_PERFORMANCE_UP_MODE,		1);

/* -----------------------------------------------------------------------------------
 */
#if defined( CONFIG_SHTPS_SY3000_FACETOUCH_DETECT ) || defined( CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT )
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_PALMDET, 			15  );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_FUZZ, 				0   );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MIN, 				1   );
	SHTPS_PARAM_DEF( SHTPS_FINGER_WIDTH_MAX, 				8   );
	SHTPS_PARAM_DEF( SHTPS_LOS_SINGLE, 						0x05);
	SHTPS_PARAM_DEF( SHTPS_LOS_MULTI, 						0x0D);
#else
	#define SHTPS_FINGER_WIDTH_PALMDET (15)
	#define SHTPS_FINGER_WIDTH_MIN     (1)
#endif /* CONFIG_SHTPS_SY3000_FACETOUCH_DETECT || CONFIG_SHTPS_SY3000_FACETOUCH_OFF_DETECT */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_CPU_CLOCK_CONTROL_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_ENABLE_ALLEVENTS, 			1);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_ENABLE_FLICK_DIST, 		15);

	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_ENABLE,		 			1);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_ENABLE_CORE_NUM, 			4);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_CLOCK_FREQUENCY, 				883200);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_CLOCK_UPPER_LIMIT, 			UINT_MAX);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_CLOCK_FREQUENCY_HIGH_REPORT, 		883200);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_CLOCK_UPPER_LIMIT_HIGH_REPORT, 	UINT_MAX);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_ENABLE_TIME_MS, 			50);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER0_ENABLE_TIME_MS_FOR_FLICK,	50);

	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_TOP_CPU_ID, 				4);

	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_ENABLE,		 			1);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_ENABLE_CORE_NUM, 			4);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_CLOCK_FREQUENCY, 				902400);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_CLOCK_UPPER_LIMIT, 			UINT_MAX);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_CLOCK_FREQUENCY_HIGH_REPORT, 		1574400);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_CLOCK_UPPER_LIMIT_HIGH_REPORT, 	UINT_MAX);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_ENABLE_TIME_MS, 			50);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_CLUSTER1_ENABLE_TIME_MS_FOR_FLICK, 50);

	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_QOS_LATENCY_ENABLE, 		1);
	SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_QOS_LATENCY_DEF_VALUE, 	524);

	#if defined(SHTPS_DEF_CTRL_CPU_CLOCK_LINKED_LCD_BRIGHT_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_CTRL_CPU_CLOCK_FOR_LOW_BRIGHTNESS_ENABLE,	0);

		#define SHTPS_PERF_LOCK_CLOCK_FREQUENCY_LCD_LPM		960000
	#endif /* SHTPS_DEF_CTRL_CPU_CLOCK_LINKED_LCD_BRIGHT_ENABLE */
	#if defined(SHTPS_DEF_CTRL_CPU_CLOCK_LINKED_ECO_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_CTRL_CPU_CLOCK_FOR_ECO_ENABLE,	0);
	#endif /* SHTPS_DEF_CTRL_CPU_CLOCK_LINKED_ECO_ENABLE */

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_PERF_LOCK_LOG_ENABLE,	0);
	    #define	SHTPS_PERF_LOCK_PRINT(...)								\
	        if(SHTPS_PERF_LOCK_LOG_ENABLE != 0){						\
	            printk(KERN_DEBUG "[shtps] [perf_lock]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_PERF_LOCK_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_CPU_CLOCK_CONTROL_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_LPWG_MODE_ENABLE)
	//#define SHTPS_LPWG_F51_REPORT_BEYOND_ACTIVE_AREA_ENABLE
	#define SHTPS_LPWG_REPORT_WG_ONLY						0x02
	#define SHTPS_LPWG_F12_CTRL08_BUFF_SIZE					15
	#define SHTPS_LPWG_F12_CTRL18_BUFF_SIZE					19
	#define SHTPS_LPWG_F12_CTRL27_BUFF_SIZE					7

	#if defined( SHTPS_HOST_LPWG_MODE_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_HOST_LPWG_ENABLE, 				0);
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_DIST_THRESHOLD, 		300);
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_CHECK_TIME_MS, 		500);
		SHTPS_PARAM_DEF( SHTPS_HOST_LPWG_HW_REV_CHK_ENABLE, 	0);
	#endif /* SHTPS_HOST_LPWG_MODE_ENABLE */

	#if defined(SHTPS_LPWG_DOUBLE_TAP_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_LPWG_MAXIMUM_TAP_TIME,			0x3C);
		SHTPS_PARAM_DEF( SHTPS_LPWG_MAXIMUM_TAP_DISTANCE,		0x1E);
	#endif /* SHTPS_LPWG_DOUBLE_TAP_ENABLE */

	#if defined(SHTPS_LPWG_CHANGE_SWIPE_DISTANCE_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_LPWG_SWIPE_MINIMUM_DISTANCE, 	0x19);
	#endif /* SHTPS_LPWG_CHANGE_SWIPE_DISTANCE_ENABLE */

	#if defined(SHTPS_LPWG_ALLOWED_SWIPES_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_LPWG_ALLOWED_SWIPES,				0x00);
	#endif /* SHTPS_LPWG_ALLOWED_SWIPES_ENABLE */

	SHTPS_PARAM_DEF( SHTPS_LPWG_ENABLE_GESTURE, 			0x02);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_INTERVAL_DEF, 			0x01);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_INTERVAL, 				0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_WAKEUP_THRESHOLD_DEF, 	0x28);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_WAKEUP_THRESHOLD, 		0x28);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF_DEF, 			0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF, 				0x06);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF_SWEEP_ON, 		0x00);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_HOLDOFF_DOUBLE_TAP,	0x06);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_CTL, 					0x02);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MAX_ACTIVE_DURATION, 		0x01);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MAX_ACTIVE_DURATION_TIME, 	0x05);
	SHTPS_PARAM_DEF( SHTPS_LPWG_REPORT_BEYOND_ACTIVE_AREA, 	0x00);
	SHTPS_PARAM_DEF( SHTPS_LPWG_QOS_LATENCY_DEF_VALUE, 		SHTPS_QOS_LATENCY_DEF_VALUE);
	SHTPS_PARAM_DEF( SHTPS_LPWG_BLOCK_TIME_MAX_MS, 			2000);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MIN_NOTIFY_INTERVAL, 		1000);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MODE_ON_AFTER_SLEEP_ENABLE, 0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_MODE_ON_AFTER_REZERO_ENABLE,0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_DOZE_ENABLE, 				1);
	SHTPS_PARAM_DEF( SHTPS_LPWG_RX_CLIP_AREA_MM,			0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_TX_CLIP_AREA_MM,			3);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_AREA_X_THRESHOLD_SWEEP_ON,		50);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_AREA_X_THRESHOLD_DOUBLE_TAP,	240);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_AREA_Y_THRESHOLD_SWEEP_ON,		0);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_AREA_Y_THRESHOLD_DOUBLE_TAP,	240);
	SHTPS_PARAM_DEF( SHTPS_LPWG_CLIP_SET_TYPE,				2);
	SHTPS_PARAM_DEF( SHTPS_LPWG_PALM_AREA_VALUE,			0x19);
	SHTPS_PARAM_DEF( SHTPS_LPWG_PALM_FILTER_MODE_VALUE,		0x01);

	#if defined(SHTPS_PROXIMITY_SUPPORT_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_LPWG_PROXIMITY_SUPPORT_ENABLE, 	1);
		SHTPS_PARAM_DEF( SHTPS_LPWG_PROXIMITY_CHECK_ASYNC_ENABLE, 0);
		SHTPS_PARAM_DEF( SHTPS_LPWG_MIN_NOTIFY_CANCEL_INTERVAL, 800);
		SHTPS_PARAM_DEF( SHTPS_LPWG_PROXIMITY_CHECK_PREWAIT, 	100);
	#endif /* SHTPS_PROXIMITY_SUPPORT_ENABLE */
	
	#if defined(SHTPS_LPWG_F51_REPORT_BEYOND_ACTIVE_AREA_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_F51_REPORT_BEYOND_ACTIVE_AREA_ADDR, 	0x0400);
	#endif /* SHTPS_LPWG_F51_REPORT_BEYOND_ACTIVE_AREA_ENABLE */

	#if defined(SHTPS_LPWG_GRIP_SUPPORT_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_PRM_LPWG_GRIP_OFF_TPS_RESET_ENABLE,	0);
	#endif /* SHTPS_LPWG_GRIP_SUPPORT_ENABLE */
#endif /* SHTPS_LPWG_MODE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_GUARANTEE_SPI_ACCESS_IN_WAKE_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_SUSPEND_SPI_RESUME_FUNC_DELAY, 0);
#endif /* SHTPS_GUARANTEE_SPI_ACCESS_IN_WAKE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECTION_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_REZERO_ENABLE, 1);
	
	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_LOG_ENABLE,    0);
		#define	SHTPS_LOG_WAKEUP_FAIL_TOUCH_EVENT_REJECT(...)					\
			if(SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECT_LOG_ENABLE != 0){			\
				printk(KERN_DEBUG "[shtps] [wakeup_fail_event]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_WAKEUP_FAIL_TOUCH_EVENT_REJECT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_WAKEUP_FAIL_TOUCH_EVENT_REJECTION_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DYNAMIC_RESET_CONTROL_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_F54_COMMAND_ENABLE,		1);
	SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_COAXIAL_PEN_ENABLE,		0);
	SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_COAXIAL_PEN_TOUCH_COUNT,	20);
	SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_WHEN_WAKEUP_REZERO_ENABLE,	1);

	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_DYNAMIC_RESET_LOG_ENABLE,			0);
		#define	SHTPS_LOG_DYNAMIC_RESET(...)								\
			if(SHTPS_DYNAMIC_RESET_LOG_ENABLE != 0){						\
				printk(KERN_DEBUG "[shtps] [dynamic_reset]" __VA_ARGS__);	\
			}
	#else
		#define	SHTPS_LOG_DYNAMIC_RESET(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DYNAMIC_RESET_CONTROL_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_BASELINE_OFFSET_DISABLE_WAIT_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_BASELINE_OFFSET_CBC_READ_AFTER_WAIT, 		30);
	SHTPS_PARAM_DEF( SHTPS_BASELINE_OFFSET_CBC_SET_AFTER_WAIT, 			30);
#endif /* SHTPS_BASELINE_OFFSET_DISABLE_WAIT_ENABLE */


/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_CTRL_FW_REPORT_RATE )
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_ENABLE, 				1);
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_PARAM_NORMAL,		0x5C);
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_PARAM_HIGH,			0x67);
	#if defined(SHTPS_DEF_CTRL_FW_REPORT_RATE_LINKED_LCD_BRIGHT_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_PARAM_LCD_BRIGHT_LOW, 0x5C);
	#endif /* SHTPS_DEF_CTRL_FW_REPORT_RATE_LINKED_LCD_BRIGHT_ENABLE */

	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_STFLIB_KEVT_NORMAL,			SHTPS_DEF_STFLIB_KEVT_SCANRATE_MODE_NORMAL);
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_STFLIB_KEVT_HIGH,			SHTPS_DEF_STFLIB_KEVT_SCANRATE_MODE_HIGH);
	SHTPS_PARAM_DEF( SHTPS_CTRL_FW_REPORT_RATE_STFLIB_KEVT_LCD_BRIGHT_LOW,	SHTPS_DEF_STFLIB_KEVT_SCANRATE_MODE_NORMAL);
#endif /* SHTPS_CTRL_FW_REPORT_RATE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_LOW_POWER_MODE_ENABLE )
	SHTPS_PARAM_DEF( SHTPS_LOW_POWER_MODE_CHEK_HW_REV_ENABLE,			0);
	SHTPS_PARAM_DEF( SHTPS_LOW_POWER_MODE_DOZE_ENABLE,					1);
	SHTPS_PARAM_DEF( SHTPS_LOW_POWER_MODE_LCD_BRIGHT_DOZE_ENABLE,		0);
#endif /* SHTPS_LOW_POWER_MODE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_COVER_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_WINDOW_LEFT, 				0);
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_WINDOW_TOP, 				0);
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_WINDOW_RIGHT, 				1440);
	SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_WINDOW_BOTTOM, 			3040);

	#if defined(SHTPS_DEF_COVER_CHANGE_REPORT_NUM_MAX_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_REPORT_NUM_MAX, 			0x05);
	#endif /* SHTPS_DEF_COVER_CHANGE_REPORT_NUM_MAX_ENABLE */

	#if defined(SHTPS_DEF_COVER_CHANGE_FINGER_AMP_THRESH_ENABLE)
		SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_FINGER_AMP_THRESH_FOR_FILM,0x0F);
		SHTPS_PARAM_DEF( SHTPS_REG_PRM_COVER_FINGER_AMP_THRESH, 		0x13);
	#endif /* SHTPS_DEF_COVER_CHANGE_FINGER_AMP_THRESH_ENABLE */
#endif /* SHTPS_COVER_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined( SHTPS_DEF_RECORD_LOG_FILE_ENABLE )
	#if defined( SHTPS_LOG_DEBUG_ENABLE )
		SHTPS_PARAM_DEF( SHTPS_RECORD_LOG_FILE_LOG_ENABLE,	0);
	    #define	SHTPS_RECORD_LOG_FILE_PRINT(...)							\
	        if(SHTPS_RECORD_LOG_FILE_LOG_ENABLE != 0){						\
	            printk(KERN_DEBUG "[shtps] [record_log_file]" __VA_ARGS__);	\
	        }
	#else
		#define	SHTPS_RECORD_LOG_FILE_PRINT(...)
	#endif /* SHTPS_LOG_DEBUG_ENABLE */
#endif /* SHTPS_DEF_RECORD_LOG_FILE_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_DEF_GLOVE_CHANGE_LANDLIFTFILTER_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_PRM_GLOVE_CHANGE_LLF_ENABLE,					1);
	SHTPS_PARAM_DEF( SHTPS_PRM_GLOVE_CHANGE_LLF_LAND_LOCK_DISTANCE,		0x19);
#endif /* SHTPS_DEF_GLOVE_CHANGE_LANDLIFTFILTER_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#if defined(SHTPS_DYNAMIC_RESET_ESD_ENABLE)
	SHTPS_PARAM_DEF( SHTPS_ESD_REGULATOR_RESET_SLEEPTIME, 	100  );
#endif /* SHTPS_DYNAMIC_RESET_ESD_ENABLE */

/* -----------------------------------------------------------------------------------
 */
#endif /* __SHTPS_PARAM_PRJ_001860_H__ */
